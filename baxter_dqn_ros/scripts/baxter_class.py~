#!/usr/bin/env python

# Joint controller - subscribes to messages from torch-ros to control joints

import argparse
import math
import random
import sys
import time
import rospy
import rospkg

from gazebo_msgs.msg import ModelStates

from std_msgs.msg import (
UInt16,
String,
Bool
)

from geometry_msgs.msg import (
PoseStamped,
Pose,
Point,
Quaternion,
)

from IK import move_vertical

import baxter_interface

from baxter_interface import CHECK_VERSION

class BaxterManipulator(object):

	def __init__(self):
		"""
		BaxterManipulator control from torch - Initialisation
		"""
		self._pub_rate = rospy.Publisher('robot/joint_state_publish_rate', UInt16, queue_size=10)
		
		self._task_pub = rospy.Publisher("task_state", Bool, queue_size=10)

		self._left_arm = baxter_interface.limb.Limb("left")
		self._right_arm = baxter_interface.limb.Limb("right")
		self._left_joint_names = self._left_arm.joint_names()
		self.grip_left = baxter_interface.Gripper('left', CHECK_VERSION)

		self._task_complete = False
		self._reset_flag = True
		
		print("Getting robot state... ")
		self._rs = baxter_interface.RobotEnable(CHECK_VERSION)
		self._init_state = self._rs.state().enabled
		print("Enabling robot... ")
		self._rs.enable()
		
		# control parameters
		self._rate = 500.0  # Hz
		# set joint state publishing to 500Hz
		self._pub_rate.publish(self._rate)
		self._left_arm.set_joint_position_speed(0.3)
		self.grip_left.open()

	def _reset(self):

		self._right_positions = dict(zip(self._right_arm.joint_names(),
                          [math.pi/3.0, -0.55, math.pi/4.0, math.pi/8.0 + 0.75,
                           0.0, 1.26 - math.pi/4.0, 0.0]))
			
		self._left_positions = dict(zip(self._left_arm.joint_names(),
                          [0.0, -0.55, 0.0, 0.75, 0.0, math.pi/2.0 - 0.2, 0.0]))
                          
		self._right_arm.move_to_joint_positions(self._right_positions)
		self._left_arm.move_to_joint_positions(self._left_positions)
		
		
	def _reset_control_modes(self):
		rate = rospy.Rate(self._rate)
		for _ in xrange(100):
			if rospy.is_shutdown():
				return False
			self._left_arm.exit_control_mode()
			self._pub_rate.publish(100)  # 100Hz default joint state rate
			rate.sleep()
		return True

	def clean_shutdown(self):
		print("\nExiting example...")
		#return to normal
		self._left_arm.move_to_neutral()
		self._reset_control_modes()
		if not self._init_state:
			print("Disabling robot...")
			self._rs.disable()
		return True

	def callback(self,data):
		#rospy.loginfo(rospy.get_caller_id() + 'I heard %s', data.data)
		self.cmd = data.data
		self.action()

	def object_pose_callback(self,data):
		index = data.name.index('object')
		self.object_position_x = data.pose[index].position.x
		self.object_position_y = data.pose[index].position.y
		self.object_position_z = data.pose[index].position.z

		 	
	def listener(self):
		rospy.Subscriber('chatter', String, self.callback)
		rospy.Subscriber("/gazebo/model_states", ModelStates, self.object_pose_callback)
		#rospy.spinOnce()

	def action(self):
		if self.cmd == 'r':
			self._left_positions["left_w2"] += 0.2
			self._pub_rate.publish(self._rate)
			self._left_arm.move_to_joint_positions(self._left_positions)
		elif self.cmd == 'l':
			self._left_positions["left_w2"] -= 0.2
			self._pub_rate.publish(self._rate)
			self._left_arm.move_to_joint_positions(self._left_positions)
		elif self.cmd == 'p':
			self._left_positions = move_vertical(self._left_positions,'d')
			self._pub_rate.publish(self._rate)
			self._left_arm.move_to_joint_positions(self._left_positions)
			time.sleep(0.2)
			self.grip_left.close()
			time.sleep(1.0)
			self._left_positions = move_vertical(self._left_positions,'u')
			self._pub_rate.publish(self._rate)
			self._left_arm.move_to_joint_positions(self._left_positions)
			
			self.end_x = self._left_arm.endpoint_pose()["position"].x
			self.end_y = self._left_arm.endpoint_pose()["position"].y
			self.end_z = self._left_arm.endpoint_pose()["position"].z
			
			if (abs(self.end_x - self.object_position_x) < 0.05) & (abs(self.end_y - \
					self.object_position_y) < 0.05)  & (abs(1+self.end_z - \
 					self.object_position_z) < 0.1):
				self._task_complete = True
	
		elif self.cmd == 'o':
			self.grip_left.open()
		elif self.cmd == 'reset':
			print("reseting 1")
			self._reset_flag = True
		self._task_pub.publish(self._task_complete)
